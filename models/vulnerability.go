package models

import (
	"fmt"
	"log"

	"github.com/shurcooL/githubv4"
	"github.com/slack-go/slack"
)

/*
query {
      repository(owner:"${repositoryOwner}" name:"${repositoryName}") {
        vulnerabilityAlerts(last: ${count}) {
          edges {
            node {
              id
              dismissedAt
              fixedAt
              repository {
                name
                owner {
                  login
                }
              }
              securityAdvisory {
                id
                description
                cvss {
                  score
                  vectorString
                }
                permalink
                severity
                summary
              }
              securityVulnerability {
                firstPatchedVersion {
                  identifier
                }
                package {
                  ecosystem
                  name
                }
                vulnerableVersionRange
                advisory {
                  cvss {
                    score
                    vectorString
                  }
                  summary
                }
              }
            }
          }
        }
      }
    }
*/
// VulnerabilityQuery query
type VulnerabilityQuery struct {
	Repository struct {
		Description         string
		VulnerabilityAlerts *struct {
			Edges []struct {
				Node *struct {
					ID          *githubv4.ID       `graphql:"id"`
					DismissedAt *githubv4.DateTime `graphql:"dismissedAt"`
					FixedAt     *githubv4.DateTime `graphql:"fixedAt"`
					Repository  *struct {
						Name  *githubv4.String `graphql:"name"`
						Owner *struct {
							Login *githubv4.String `graphql:"login"`
						} `graphql:"owner"`
					}
					SecurityAdvisory *struct {
						ID          *githubv4.ID                       `graphql:"id"`
						Description *githubv4.String                   `graphql:"description"`
						CVSS        *CVSS                              `graphql:"cvss"`
						Permalink   *githubv4.URI                      `graphql:"permalink"`
						Severity    *githubv4.SecurityAdvisorySeverity `graphql:"severity"`
						Summary     *githubv4.String                   `graphql:"summary"`
					} `graphql:"securityAdvisory"`
					SecurityVulnerability *struct {
						FirstPatchedVersion *struct {
							Identifier *githubv4.String `graphql:"identifier"`
						}
						Package *struct {
							Ecosystem *githubv4.String `graphql:"ecosystem"`
							Name      *githubv4.String `graphql:"name"`
						} `graphql:"package"`
						VulnerableVersionRange *githubv4.String `graphql:"vulnerableVersionRange"`
						Advisory               *struct {
							CVSS    *CVSS            `graphql:"cvss"`
							Summary *githubv4.String `graphql:"summary"`
						} `graphql:"advisory"`
					} `graphql:"securityVulnerability"`
				} `graphql:"node"`
			} `graphql:"edges"`
		} `graphql:"vulnerabilityAlerts(last: $count)"`
	} `graphql:"repository(owner: $owner, name: $name)"`
}

type CVSS struct {
	Score        *githubv4.Float  `graphql:"score"`
	VectorString *githubv4.String `graphql:"vectorString"`
}

func (q *VulnerabilityQuery) GetMessage() []slack.Block {
	blocks := []slack.Block{}

	// add summary
	blocks = append(blocks, slack.NewSectionBlock(slack.NewTextBlockObject(slack.MarkdownType,
		fmt.Sprintf("You have %d issue(s) in *%s/%s*", len(q.Repository.VulnerabilityAlerts.Edges),
			*q.Repository.VulnerabilityAlerts.Edges[0].Node.Repository.Owner.Login,
			*q.Repository.VulnerabilityAlerts.Edges[0].Node.Repository.Name), false, false), nil, nil))

	// add divider
	blocks = append(blocks, slack.NewDividerBlock())

	// add alerts
	for i, edge := range q.Repository.VulnerabilityAlerts.Edges {
		log.Println(edge)
		alertBlock := slack.NewSectionBlock(slack.NewTextBlockObject(slack.MarkdownType,
			fmt.Sprintf(`
			*Issue #%d*
*Ecosystem*: %s
*Package name*: %s
*Vulnerability version range*: %s
*Patched version*: %s
*Severity*: %s
*Summary*: %s`,
				i+1,
				*edge.Node.SecurityVulnerability.Package.Ecosystem,
				*edge.Node.SecurityVulnerability.Package.Name,
				*edge.Node.SecurityVulnerability.VulnerableVersionRange,
				*edge.Node.SecurityVulnerability.FirstPatchedVersion.Identifier,
				*edge.Node.SecurityAdvisory.Severity,
				*edge.Node.SecurityAdvisory.Summary), false, true),
			nil,
			slack.NewAccessory(&slack.ButtonBlockElement{
				Type:  slack.METButton,
				Text:  slack.NewTextBlockObject(slack.PlainTextType, "View Advisory", true, false),
				URL:   edge.Node.SecurityAdvisory.Permalink.String(),
				Style: slack.StyleDanger,
			}))

		blocks = append(blocks, alertBlock)
	}

	return blocks
}
